[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "cuid2"
dynamic = ["version"]
authors = [
    {name = "Will Gordon", email = "wgordon@redhat.com"},
]
description = "Next generation GUIDs. Collision-resistant ids optimized for horizontal scaling and performance."
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Topic :: Security :: Cryptography",
    "Typing :: Typed"
]
keywords = ['crypt', 'security', 'uuid', 'guid', 'cuid', 'cryptography']

[project.urls]
repository = "https://github.com/gordon-code/cuid2/"

[project.scripts]
cuid2 = "cuid2.cli:main"

[tool.pdm.version]
source = "scm"

[tool.pdm.scripts]
# Default to linting the entire src/ directory, but allow overriding with specific files
black = "black {args:src/ local/tests/}"
ruff = "ruff check --fix --exit-zero {args:src/ local/tests/}"
spelling = "codespell {args:src/ local/tests/}"
pylint = "pylint {args:src/ local/tests/}"
safety = "safety check --bare"
typing = "mypy {args:src/ local/tests/}"
lint-fast = {composite = ["black", "ruff"]}
lint-full = {composite = ["lint-fast", "spelling", "pylint", "typing", "safety"]}
testing = "pytest local/tests"
testing-slow = "pytest local/tests --runslow"
tox = "tox --parallel auto"

[tool.pdm.dev-dependencies]
lint = [
    "black~=23.3.0",         #  https://github.com/psf/black                    (latest:  23.3.0)
    "codespell~=2.2.4",      #  https://github.com/codespell-project/codespell  (latest:  2.2.4)
    "pylint~=2.17.4",        #  https://github.com/PyCQA/pylint                 (latest:  2.17.4)
    "ruff~=0.0.269",         #  https://github.com/charliermarsh/ruff           (latest:  0.0.269)
    "safety==2.4.0b1",       #  https://github.com/pyupio/safety                (latest:  2.3.5)
]
test = [
    "pytest~=7.3.1",         #  https://github.com/pytest-dev/pytest            (latest:  7.3.1)
    "pytest-mock~=3.10.0",   #  https://github.com/pytest-dev/pytest-mock/      (latest:  3.10.0)
    "pytest-sugar~=0.9.7",   #  https://github.com/Teemu/pytest-sugar/          (latest:  0.9.7)
]
tox = [
    # Version reduced to prevent `packaging` conflict with safety
    "tox~=4.4.12",            #  https://github.com/tox-dev/tox                 (latest:  4.5.1)
    "tox-pdm~=0.6.1",        #  https://github.com/pdm-project/tox-pdm          (latest:  0.6.1)
]
typing = [
   "mypy~=1.3.0",            #  https://github.com/python/mypy                  (latest:  1.3.0)
]

[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4
    env_list = py3{8,9,10,11}, check
    work_dir = local/.tox
    isolated_build = True

    [testenv]
    description = run unit tests
    groups = test
    commands = testing

    [testenv:check]
    description = run linters and typing
    skip_install = true
    groups = lint, typing, test
    commands = lint-full
"""

[tool.black]
line-length = 120
target_version = ["py38"]

[tool.ruff]
line-length = 120
src = ["src"]
target-version = "py38"
cache-dir = "local/.ruff_cache"
# "E", "F" already included from `select`
# https://beta.ruff.rs/docs/rules
extend-select = [
    "W", "C90", "I", "N", "UP", "S", "BLE",
    "B", "A", "COM", "C4", "DTZ", "T10", "EM",
    "ISC", "ICN", "G", "INP", "PIE", "T20", "PT",
    "Q", "RSE", "RET", "SLF", "SIM", "INT", "ARG",
    "PTH", "PGH", "PL", "TRY", "RUF", "D", "ANN",
    "PYI", "TCH", "ERA",
]  # purposely not including "DJ", "YTT", "EXE", "PD", "NPY", "FBT" (boolean checking)
extend-ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D104", # Missing docstring in public package
    "D205", # Blank line required between summary line and description
    "D401", # First line should be in imperative mood
]
# Don't automatically remove `print`
# Stop automatically removing unused imports
unfixable = ["T201", "F401", "F841"]
force-exclude = true

[tool.ruff.per-file-ignores]
# Ignore `assert` in test files (S101), magic values (PLR2004), and private member accessed (SLF001)
"test_*.py" = ["S101", "PLR2004", "SLF001"]

[tool.ruff.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
minversion = "7.3"
cache_dir = "local/.pytest_cache"
python_files = "test_*.py"

[tool.pylint.master]
ignore-patterns = "test_.*.py"

[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
]

[tool.pylint.design]
max-parents = 13
max-args = 10

[tool.pylint.string]
check-quote-consistency = "yes"

[tool.mypy]
cache_dir = "local/.mypy_cache"